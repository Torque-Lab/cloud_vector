// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model UserBaseAdmin {
  id                   String    @id @default(cuid())
  email                String    @unique
  password             String
  frist_name           String?
  last_name            String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  role                 Role @default(ADMIN)
  last_login           DateTime?
  last_logout          DateTime?
  last_active          DateTime?
  login_count          Int @default(0)
  permissions          Permission[] 
  subscription         Subscription[]
  projects             Project[]
  resource_usages      Resource_Usage[]
  payments             Payment[]
  invoices             Invoice[]
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  password             String
  frist_name           String?
  last_name            String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  last_login           DateTime?
  last_logout          DateTime?
  last_active          DateTime?
  login_count          Int @default(0)
  role                 Role @default(DEVELOPER)
  permissions          Permission[] 
  projects             Project[]

}

enum Role {
  ADMIN
  DEVELOPER
}


model Permission {
  id                        String    @id @default(cuid())
  userId                    String
  projectId                 String
  postgresDBId              String?
  rabbitmqId                String?
  redisId                   String?
  vectorDBId                String?
  userBaseAdminId           String
  permission_given_by       String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  user                      User @relation(fields: [userId], references: [id])
  projects                  Project @relation(fields: [projectId], references: [id])
  postgresDB                PostgresDB? @relation(fields: [postgresDBId], references: [id])
  rabbitmq                  RabbitMQ? @relation(fields: [rabbitmqId], references: [id])
  redis                     Redis? @relation(fields: [redisId], references: [id])
  vectorDB                  VectorDB? @relation(fields: [vectorDBId], references: [id])
  userBaseAdmin             UserBaseAdmin @relation(fields: [userBaseAdminId], references: [id])
  permissionItems           PermissionItem[]  
  @@index([userId]) 
  @@index([projectId])
}

model PermissionItem {
  id            String @id @default(cuid())
  permission    String
  permissionId  String
  permissionRef Permission @relation(fields: [permissionId], references: [id])
  @@index([permissionId])
}


model Project {
  id                       String    @id @default(cuid())
  name                     String
  userId                   String?
  description              String?
  userBaseAdminId          String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  permissions              Permission[]
  postgresDB               PostgresDB[]
  rabbitmq                 RabbitMQ[]
  redis                    Redis[]
  vectorDB                 VectorDB[]
  user                     User? @relation(fields: [userId], references: [id])
  userBaseAdmin            UserBaseAdmin @relation(fields: [userBaseAdminId], references: [id])
  @@index([userBaseAdminId])
}

model VectorDB {
  id                  String    @id @default(cuid())
  projectId           String
  is_active           Boolean @default(true)
  is_provisioned      Boolean @default(false)
  api_key             String? @unique
  username            String
  password            String    
  host                String
  port                Int
  database_name       String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  permissions         Permission[]
  projects            Project @relation(fields: [projectId], references: [id])
@@index([projectId])
}
model PostgresDB {
  id                 String    @id @default(cuid())
  projectId          String
  is_active          Boolean   @default(true)
  is_provisioned     Boolean @default(false)
  status             String @default("PENDING")
  backup_history      BackupHistory[]
  provisioning_flow_status ProvisioningFlowStatus @default(PUSHED_TO_ARGOCD)
  api_key            String?   @unique 
  username           String
  password           String    
  host               String
  port               String
  database_name      String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  permissions        Permission[]
  projects           Project @relation(fields: [projectId], references: [id])
@@index([projectId])
}
enum ProvisioningFlowStatus {
  PUSHED_TO_ARGOCD
  SYNCED_TO_ARGOCD
  COMPLETED
  FAILED
}
model BackupHistory{
  id                 String    @id @default(cuid())
  resource_id        String
  backup_time_taken  String?
  status             BackupStatus @default(PENDING)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  postgresDB          PostgresDB @relation(fields: [resource_id], references: [id])
}
enum BackupStatus {
  PENDING
  COMPLETED
  FAILED
}

model RabbitMQ {
  id                  String    @id @default(cuid())
  projectId           String
  is_active           Boolean @default(true)
  is_provisioned      Boolean @default(false)
  provisioning_flow_status ProvisioningFlowStatus @default(PUSHED_TO_ARGOCD)
  api_key             String? @unique
  username            String
  password            String    
  host                String
  port                Int
  queue_name          String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  permissions         Permission[]
  projects            Project @relation(fields: [projectId], references: [id])
@@index([projectId])
}
model Redis {
  id                    String    @id @default(cuid())
  projectId             String
  is_active             Boolean @default(true)
  is_provisioned        Boolean @default(false)
  provisioning_flow_status ProvisioningFlowStatus @default(PUSHED_TO_ARGOCD)
  api_key               String? @unique 
  username              String
  password              String    
  host                  String
  port                  Int
  redis_name            String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  permissions           Permission[]
  projects              Project @relation(fields: [projectId], references: [id])
@@index([projectId])
}

enum Tier_Subscription {
  FREE
  BASE
  PRO
}

model TierRule {
  id                   String @id @default(cuid())
  tier                 Tier_Subscription @unique
  Max_Projects         Int
  Max_Databases        Int
}

model Subscription {
  id                     String   @id @default(cuid())
  userBaseAdminId        String
  stripeCustomerId       String? 
  stripeSubscriptionId   String?   
  stripePriceId          String?   
  stripeProductId        String?   
  status                 SubscriptionStatus @default(INACTIVE)
  currentPeriodStart     DateTime?   
  cancelAtPeriodEnd      Boolean @default(false)
  canceledAt             DateTime?
  tier                   Tier_Subscription
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  userBaseAdmin UserBaseAdmin @relation(fields: [userBaseAdminId], references: [id])
  @@index([userBaseAdminId])
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
}

model Resource_Usage {
  id                   String    @id @default(cuid())
  userBaseAdminId      String @unique
  read_QPM             Int @default(0) //Queries Per Month
  write_QPM            Int @default(0) //Queries Per Month
  bandwidth            Int  @default(0) //Bandwidth in GB per month
  storage              Int  @default(0) //Storage in GB per month
  index_rebuilds       Int? @default(0) //Index Rebuilds count
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
 
  userBaseAdmin UserBaseAdmin @relation(fields: [userBaseAdminId], references: [id])
  @@index([userBaseAdminId])
}
model Payment {
  id                     String   @id @default(cuid())
  userBaseAdminId        String @unique
  stripePaymentIntentId  String? 
  stripeInvoiceId        String? 
  amount                 Int              
  currency               String           
  status                 PaymentStatus
  paymentMethod          String?          
  receiptUrl             String?          
  type                   PaymentType @default(CURRENT)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  userBaseAdmin UserBaseAdmin @relation(fields: [userBaseAdminId], references: [id])
}

enum PaymentStatus {
  REQUIRES_PAYMENT_METHOD
  REQUIRES_CONFIRMATION
  REQUIRES_ACTION
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
}

enum PaymentType {
  CURRENT
  HISTORY
}

model Invoice {
  id                     String   @id @default(cuid())
  stripeInvoiceId        String   @unique
  userBaseAdminId        String
  amount                 Int
  currency               String
  status                 InvoiceStatus
  hostedInvoiceUrl       String?
  pdfUrl                 String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  userBaseAdmin UserBaseAdmin @relation(fields: [userBaseAdminId], references: [id])
  @@index([userBaseAdminId])
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}
